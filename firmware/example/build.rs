use std::fs;
use std::path::Path;
use toml::Value;

fn main() {
    embuild::espidf::sysenv::output();
    
    // Validate that cfg.toml exists and contains required configuration
    let cfg_path = Path::new("cfg.toml");
    if !cfg_path.exists() {
        panic!("cfg.toml file not found! Please create cfg.toml with your configuration values. See cfg.toml.example for reference.");
    }
    
    // Read and parse config file
    let cfg_content = fs::read_to_string(cfg_path)
        .expect("Failed to read cfg.toml file");
    
    let cfg: Value = cfg_content.parse()
        .expect("Failed to parse cfg.toml as valid TOML");
    
    // Extract led section
    let led_config = cfg.get("example")
        .expect("cfg.toml missing [led] section");
    
    // Basic validation - check for required fields
    let required_fields = ["wifi_ssid", "wifi_pass", "mqtt_url", "mqtt_client_id"];
    for field in &required_fields {
        if !led_config.get(field).is_some() {
            panic!("cfg.toml is missing required field: {}", field);
        }
    }
    
    // Extract certificate paths with defaults
    let cert_ca = led_config.get("cert_ca")
        .and_then(|v| v.as_str())
        .unwrap();
    let cert_crt = led_config.get("cert_crt")
        .and_then(|v| v.as_str())
        .unwrap();
    let cert_key = led_config.get("cert_key")
        .and_then(|v| v.as_str())
        .unwrap();
    
    // Validate certificate files exist
    let certs = [
        ("CA certificate", cert_ca),
        ("Client certificate", cert_crt),
        ("Private key", cert_key),
    ];
    
    for (name, path) in &certs {
        if !Path::new(path).exists() {
            panic!("{} file not found at path: {}", name, path);
        }
    }
    
    // Generate certificates.rs file
    let out_dir = std::env::var("OUT_DIR").unwrap();
    let cert_file_path = Path::new(&out_dir).join("certificates.rs");
    
    // Get absolute paths for the certificates relative to CARGO_MANIFEST_DIR
    let manifest_dir = std::env::var("CARGO_MANIFEST_DIR").unwrap();
    let cert_ca_abs = Path::new(&manifest_dir).join(cert_ca);
    let cert_crt_abs = Path::new(&manifest_dir).join(cert_crt);
    let cert_key_abs = Path::new(&manifest_dir).join(cert_key);
    
    let cert_code = format!(
        r#"// Auto-generated by build.rs from cfg.toml certificate paths
// DO NOT EDIT THIS FILE MANUALLY

pub const SERVER_CERT: &[u8] = include_bytes!("{}");
pub const CLIENT_CERT: &[u8] = include_bytes!("{}");
pub const PRIVATE_KEY: &[u8] = include_bytes!("{}");
"#,
        cert_ca_abs.to_string_lossy(),
        cert_crt_abs.to_string_lossy(),
        cert_key_abs.to_string_lossy()
    );
    
    fs::write(&cert_file_path, cert_code)
        .expect("Failed to write certificates.rs");
    
    println!("cargo:rerun-if-changed=cfg.toml");
    println!("cargo:rerun-if-changed={}", cert_ca);
    println!("cargo:rerun-if-changed={}", cert_crt);
    println!("cargo:rerun-if-changed={}", cert_key);
    println!("cargo:rustc-env=CONFIG_VALIDATED=1");
    
    println!("Generated certificates.rs with paths:");
    println!("  CA: {}", cert_ca);
    println!("  Cert: {}", cert_crt);
    println!("  Key: {}", cert_key);
}
